rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        // TODO test all the security rules
        function isLoggedIn() {
            return request.auth != null;
        }

        match /homes/{homeId} {
            function isValidHome() {
                return request.resource.data.name is string &&
                request.resource.data.name.size() > 0 &&
                request.resource.data.name.size() < 31 &&
                request.resource.data.storage is list && // this should be a string list where each element is less than 31 characters
                request.resource.data.users[request.auth.uid] == true;
            }

            function isHomeUser() {
                return resource.data.users[request.auth.uid] == true;
            }

            allow read, delete: if isLoggedIn() && isHomeUser();
            allow create: if isLoggedIn() && isValidHome();
            allow update: if isLoggedIn() && isHomeUser();

            match /items/{itemId} {
                function isHomeUserTwo() { // can there be two function of the same name
                    return get(/databases/$(database)/documents/homes/$(homeId)).data.users[request.auth.uid] == true;
                }

                function isValidItem() {
                    return request.resource.data.name is string &&
                    request.resource.data.name.size() > 0 &&
                    request.resource.data.name.size() < 31 &&
                    request.resource.data.storedIn is string &&
                    request.resource.data.storedIn.size() < 31 &&
                    request.resource.data.comments is string &&
                    request.resource.data.comments.size() < 301 &&
                    (request.resource.data.bestBefore == null || request.resource.data.bestBefore is timestamp) &&
                    (request.resource.data.createdAt == null || request.resource.data.createdAt is timestamp) &&
                    (request.resource.data.dateBought == null || request.resource.data.dateBought is timestamp) &&
                    (request.resource.data.primaryDate == null || request.resource.data.primaryDate is timestamp) &&
                    (request.resource.data.useBy == null || request.resource.data.useBy is timestamp) &&
                    (request.resource.data.userDefinedDate == null || request.resource.data.userDefinedDate is timestamp)
                }

                allow read, delete: if isLoggedIn() && isHomeUserTwo();
                allow create, update: if isLoggedIn() && isHomeUserTwo() && isValidItem();
            }
        }

        match /users/{userId} {
            allow read: if isLoggedIn() && request.auth.uid == userId;
            allow create, delete: if false;
            allow update: if isLoggedIn() &&
                request.auth.uid == userId &&  
                resource.data.uid == request.resource.data.uid &&
                resource.data.email == request.resource.data.email &&
                request.resource.data.displayName is string &&
                request.resource.data.displayName.size() > 0 && 
                request.resource.data.displayName.size() < 31;
        }
    }
}

// request.resource.data is the new document coming in
// resource.data is the document already on Firestore

// firebase deploy --only firestore:rules